#!/bin/sh 
#pkg_intro
#Copyright(C) 11/17/2021 Umesh Joshi
#
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE
#-------------------------------------------------------------------------
#
#Slackware SlackBuild_script
#===========================
#BY:	Umesh Joshi<slackuj@gmail.com>
#FOR:	qemu
#URL:	https://www.qemu.org
#ChangeLog:
#6.0.1 		11/17/21 by Umesh Joshi<slackuj@gmail.com>
#		*First Release
#
#Run sh qemu.SlackBuild to build a Slackware package.
#The package .txz/.tgz are created in /tmp
#Install it using `installpkg`
#
#-------------------------------------------------------------------------
#
# set inital variables

PRGNM=qemu
VERSION=${VERSION:-"6.0.1"}
BUILD=${BUILD:-1}
NUMJOBS=${NUMJOBS:"-j$(nproc)"}
TAG=${TAG:-asanna}

#place to build (TMP) package (PKG) and output (OUTPUT) the program:
TMP=${TMP:-/tmp/build}
PKG=$TMP/package-$PRGNM
OUTPUT=${OUTPUT:-/tmp}
SOURCE=$TMP/source/*

#automatically detect the architecture we're building on:
if [ -z "$ARCH" ]; then
	case "$(uname -m)" in
		i?86)export ARCH=i586;;
		armv7hl) export ARCH=$(uname -m);;
		arm*)export ARCH=arm;;
		#unless ARCH is pre-set,use uname -m for all other archs:
		*)export ARCH=$(uname -m);;
	esac
fi
# set CFLAGS/CXXFLAGS and LIBDIRSUFIX:
case "$ARCH" in
	i?86) SLKCFLAGS="-02 -march=${ARCH} -mtune=i686"
		SLKLDFLAGS=""; LIBDIRSUFFIX=""
		KVMARCH="i386"
		;;
	armv7hl) SLKCFLAGS="-02 -march=armv7-a -mfpu=vfpv3-d16"
		SLKLDFLAGS=""; LIBDIRSUFFIX=""
		KVMARCH=""
		;;
	x86_64) SLKCFLAGS="-02 -fPIC"
		SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
		KVMARCH="x86_64"
		;;
	*) SLKCFLAGS=${SLKCFLAGS:-"02"}
		SLKLDFLAGS=${SLKLDFLAGS:-""}; LIBDIRSUFFIX=${LIBDIRSUFFIX:-""}
	KVMARCH=""	
		;;
esac
case "$ARCH" in
	arm*) TARGET=$ARCH-slackware-linux-gnueabi ;;
	*) TARGET=$ARCH-slackware-linux ;;
esac

#exit the script on errors:
set -e
trap 'echo"$0 FAILED at line $LINEONO!" | tee $OUTPUT/error-${PRGNM}.log' ERR

#catch unitialized variables
set -u
P1=${1:-1}

#save old mask and set to 0022:
_UMASK_=$(umask)
umask 0022

##########################################  C R E A T E    W O R K I N G    D I R E C T O R I E S ########################################
mkdir -p $OUTPUT #place for the package to be saved
mkdir -p $TMP/tmp-$PRGNM #location to build the source
mkdir -p $PKG #place for the package to be built
mkdir -p $TMP/source #place for the source
rm -rf $PKG/* #always erase old package's contents
rm -rf $TMP/tmp-$PRGNM/* #remove the remnants of previous build
rm -rf $OUTPUT/{configure,make,install,error,makepkg}-$PRGNM.log #remove old log files
#rm -rf $TMP/source/* #erase old source patches
#Download the source files
#cd $TMP/source
#wget https://download.qemu.org/qemu-6.0.1.tar.xz

#check for source file availability
if ! [ -f ${SOURCE} ]; then
	echo "source not available yet"
	echo "check your internet connection"
	echo "....Aborting the build"
	exit 1
fi
if [ "$P1" == "--download" ]; then
	echo "Download Complete"
	exit 0
fi


####################################  P A C K A G E	B U I L D I N G ###################################################################
echo "++"
echo "--------------$PRGNM-$VERSION-----------------"
echo "++"
cd $TMP/tmp-$PRGNM
echo "extracting the source archive(s) for $PRGNM....."
tar -xvf ${SOURCE} #check the options to be supplied to your specific source file
chown -R root:root *
chmod -R u+w,go+r-w,a+x-s *
echo building...........

cd *

#care for users who used "su" instead of "su -":
if ! whcich texi2html 1>/dev/null 2>/dev/null ; then
	export PATH=$PATH:/usr/share/texmf/bin
fi

#support PulseAudio if it is installed on the computer:
if pkg-config --exists libpulse 2>/dev/null ; then
	AUDIO_DRV="${AUDIO_DRV:-alsa,oss,sdl,pa}"
else
	AUDIO_DEV="${AUDIO_DRV:-alsa,oss,sdl}"
fi

#set nettle if it is installed on the compter:
if pkg-config --exists nettle 2>/dev/null ; then
	USE_NETTLE="$USE_NETTLE:---enable-nettle}"
fi

# support the SPICE protocol if it is installed on the computer:
if pkg-config ---exists spice-server 2>/dev/null ; then
	USE_SPICE="${USE_SPICE:---enable-spice}"
else
	USE_SPICE="${USE_SPICE:---disable-spice}"
fi

#ensure that libusb static libs are use:
sed -i configure \
	-e 's/--cflags libusb-1.0/& --static/' \
	-e 's/--libs libusb-1.0/& --static/'
PKG_CONFIG_PATH="$TMP/tmp-$PRGNM/qemudeps/lib/pkgconfig" \
	LDFLAGS="$(pkg-congig --libs libusb-1.0 --static) -latomic $SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
#set configure options
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --docdir=/usr/doc/$PRGNM-$VERSION \
  --enable-gtk \
  --enable-jemalloc \
  --enable-kvm \
  --enable-sdl \
  --enable-system \
  --enable-tcg-interpreter \
  --enable-vde \
  --enable-virtfs \
  --enable-vnc --enable-vnc-sasl --enable-vnc-jpeg \
  --target-list=aarch64-softmmu,arm-softmmu,i386-softmmu,x86_64-softmmu,i386-linux-user,x86_64-linux-user,arm-linux-user,armeb-linux-user \
  --audio-drv-list=${AUDIO_DRV} \
  ${USE_NETTLE}
  ${USE_SPICE}
2>&1|tee $OUTPUT/configure-${PRGNM}.log
# Make these first; otherwise make won't run in parallel (thanks KB).
make config-all-devices.mak config-all-disas.mak

make $NUMJOBS 2>&1|tee $OUTPUT/make-${PRGNM}.log
make DESTDIR=$PKG install 2&1|tee $OUTPUT/install-${PRGNM}.log

#install udev rules for /dev/kvm -make sure that your user belongs to the "kvm" group;create that group first:
mkdir -p $PKG/lib/udev/rules.d/
install -m0644 $SOURCE/65-kvm.rules -$PKG/lib/udev/rules.d/65-kvm.rules

#create 'qemu-kvm' symlink.
[ ! -z $KVMARCH ] && ln -s qemu-system-$KVMARCH $PKG/usr/bin/qemu-kvm

#update the mime databas:
if [-x usr/bin/update-mime-database];then
	chroot ./usr/bin/update-mime-database usr/share/mime 1>/dev/null 2>&1
fi

#compress the man page(s):
if [-d $PKG/usr/man];then
	find $PKG/usr/man -type f -name "*.?" -exec gzip -9f {} \;
	for i in $(find $PKG/usr/man -type l -name "*.?");do ln -s $(readlink $i).gz $i.gz;rm $i;done
fi

#compress info pages if any
if [-d $PKG/usr/info];then
	gzip -9 $PKG/usr/info/*.info
	rm -f $PKG/usr/info/dir
fi

#strip binaries if any
find $PKG|xargs file|grep -e "executable" -e "shared object"|grep ELF\
	|cut -f 1 -d :|xargs strip --strip-unneeded 2> /dev/null ||true

#add a package description
mkdir -p $PKG/install
wget https://github.com/slack-uj/slackbuilds/blob/main/Slack-desc
#build the package
cd $PKG
makepkg --linkadd y --chown n 
$OUTPUT/${PRGNM}-${VERSION}-${ARCH}-${BUILD}${TAG}.txz 2>&1|tee $OUTPUT/makepkg-${PRGNM}.log
cd $OUTPUT
md5sum ${PRGNM}-${VERSION}-${ARCH}-${BUILD}${TAG}.txz > ${PRGNM}-${VERSION}-${ARCH}-${BUILD}${BUILD}${TAG}.txz.md5
cd -
cat $PKG/install/slack-desc |grep "^${PRGNM} > $OUTPUT/${PRGNM}-${VERSION}-${ARCH}-${BUILD}${TAG}.txt

#restore the original umask:
umask ${_UMASK_}

